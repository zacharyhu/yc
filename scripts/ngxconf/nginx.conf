
#user  nobody;
worker_processes  2;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  10240;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;


    lua_package_path "/usr/local/lualib/resty/?.lua;;";

    #gzip  on;
    server {
	listen 88;
	

	location /insert_monitor_data {
		default_type text/html;
		set_by_lua_file $res 'conf/insertdata.lua';
		echo  $res;
	}
	location /con {
		internal;
		content_by_lua_file conf/conn.lua;
	}
	location /process_check {
	    content_by_lua_file conf/process_check.lua;
	}
	location /process_list {
	    content_by_lua_file conf/process_list.lua;
	}
	location /test_arg {
		content_by_lua '
		    local args = ngx.req.get_uri_args()
		    for key,val in pairs(args) do
			 if type(val) == "table" then
                    		ngx.say(key, ": ", table.concat(val, ", "))
                	else
                    		ngx.say("local "..key," ="..val)
                	end
            	    end
		';
	}
	location /test {
	content_by_lua '
	local mysql = require "resty.mysql"
            local db, err = mysql:new()
	    local id = ngx.var.arg_id
	    local pid = ngx.var.arg_pid
	    local pcpu = ngx.var.arg_pcpu	    
	    local pmem = ngx.var.arg_pmem
	    local pnum = ngx.var.arg_pnum
	    local pconum = ngx.var.arg_pconum 


            if not db then
                ngx.say("failed to instantiate mysql: ", err)
                return
            end

            db:set_timeout(1000) -- 1 sec

            local ok, err, errno, sqlstate = db:connect{
                host = "10.48.179.112",
                port = 3306,
                database = "gp_platform",
                user = "dc",
                password = "dc",
                max_packet_size = 1024 * 1024 }

            if not ok then
                ngx.say("failed to connect: ", err, ": ", errno, " ", sqlstate)
                return
            end

            ngx.say("connected to mysql.")

	    local sql = ("insert into monitor_check_process_status(process_id,local_process_id,process_cpu,process_mem,process_threads_num,process_conn_num) "
                               .. "values (\'" .. id ..
                                        "\',\'".. pid ..
                                        "\',\'".. pcpu..
                                        "\',\'".. pmem..
                                        "\',\'".. pnum..
                                        "\',\'".. pconum..
                                        "\')"
                            )


            res, err, errno, sqlstate =
                db:query(sql)
            if not res then
                ngx.say("bad result: ", err, ": ", errno, ": ", sqlstate, ".")
                return
            end

            ngx.say(res.affected_rows, " rows inserted into table process ",
                    "(last insert id: ", res.insert_id, ")")

            res, err, errno, sqlstate =
                db:query("select * from monitor_check_process_status  order by id asc")
            if not res then
                ngx.say("bad result: ", err, ": ", errno, ": ", sqlstate, ".")
                return
            end

            local cjson = require "cjson"
            ngx.say("result: ", cjson.encode(res))

	    local ok, err = db:set_keepalive(0, 100)
            if not ok then
                ngx.say("failed to set keepalive: ", err)
                return
            end
	';
    }




    }

    server {
        listen       80;
        server_name  centos6.repo;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   /mnt/centos;
            autoindex on;
            autoindex_exact_size off;
            autoindex_localtime on;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443;
    #    server_name  localhost;

    #    ssl                  on;
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_timeout  5m;

    #    ssl_protocols  SSLv2 SSLv3 TLSv1;
    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers   on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
