
#user  nobody;
worker_processes  5;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  102400;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    lua_package_path "/usr/local/lib/lua/*.lua;;";
    upstream mysql {
         drizzle_server 127.0.0.1:3306 dbname=ngx_test
         password=ngx_test user=ngx_test
         protocol=mysql;
         drizzle_keepalive max=200 overflow=reject;
    }

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }
	location /check{
		content_by_lua_file "conf/check.lua";
	}
	location /newcheck{
		content_by_lua_file "conf/new_check.lua";
	}
	location /testsocket{
		content_by_lua_file "conf/socket.lua";
	}
	location /check_cpu{
		content_by_lua_file "conf/cpu.lua";
	}
	location /check_mem{
		content_by_lua_file "conf/mem.lua";
	}
	location /check_disk{
		content_by_lua_file "conf/disk.lua";
	}
	location /check_traffic{
		content_by_lua_file "conf/traffic.lua";
	}
        location /test {
            content_by_lua '
            local mysql = require "resty.mysql"
            local db, err = mysql:new()
            if not db then
                ngx.say("failed to instantiate mysql: ", err)
                return
            end

            db:set_timeout(1000) -- 1 sec

            -- or connect to a unix domain socket file listened
            -- by a mysql server:
            --     local ok, err, errno, sqlstate =
            --           db:connect{
            --              path = "/path/to/mysql.sock",
            --              database = "ngx_test",
            --              user = "ngx_test",
            --              password = "ngx_test" }

            local ok, err, errno, sqlstate = db:connect{
                host = "127.0.0.1",
                port = 3306,
                database = "ngx_test",
                user = "ngx_test",
                password = "ngx_test",
                max_packet_size = 1024 * 1024 }

            if not ok then
                ngx.say("failed to connect: ", err, ": ", errno, " ", sqlstate)
                return
            end

            -- ngx.say("connected to mysql.")

            -- local res, err, errno, sqlstate =
            --    db:query("drop table if exists cats")
            -- if not res then
            --    ngx.say("bad result: ", err, ": ", errno, ": ", sqlstate, ".")
            --    return
            -- end

            -- res, err, errno, sqlstate =
            --    db:query("create table cats "
            --             .. "(id serial primary key, "
            --             .. "name varchar(5))")
            -- if not res then
            --    ngx.say("bad result: ", err, ": ", errno, ": ", sqlstate, ".")
            --    return
            -- end

            -- ngx.say("table cats created.")


            -- res, err, errno, sqlstate =
            --    db:query("insert into cats (name) "
            --             .. "values (\'Bob\'),(\'\'),(null)")
            -- if not res then
            --    ngx.say("bad result: ", err, ": ", errno, ": ", sqlstate, ".")
            --    return
            -- end

            -- ngx.say(res.affected_rows, " rows inserted into table cats ",
            --        "(last insert id: ", res.insert_id, ")")

            res, err, errno, sqlstate =
                db:query("select * from cats order by id asc")
            if not res then
                ngx.say("bad result: ", err, ": ", errno, ": ", sqlstate, ".")
                return
            end

            local cjson = require "cjson"
            ngx.say("result: ", cjson.encode(res))

            -- put it into the connection pool of size 100,
            -- with 0 idle timeout
            local ok, err = db:set_keepalive(0, 100)
            if not ok then
                ngx.say("failed to set keepalive: ", err)
                return
            end

            -- or just close the connection right away:
            -- local ok, err = db:close()
            -- if not ok then
            --     ngx.say("failed to close: ", err)
            --     return
            -- end
            ';


          }
	location /ti {
			content_by_lua_file conf/host.lua;
		}
         location /mo {
             set_unescape_uri $name $arg_host;
             set_unescape_uri $item $arg_item;
             set_unescape_uri $value $arg_value;
             set_quote_sql_str $quoted_host $name;
             set_quote_sql_str $quoted_item $item;
             set_quote_sql_str $quoted_value $value;
             drizzle_query "insert into host_monit(host,item,value) VALUES($quoted_host,$quoted_item,$quoted_value)";
             drizzle_pass mysql;
         }
         location /monit {
           default_type 'text/plain';
           content_by_lua  '
           local host = ngx.var.arg_host
           local item = ngx.var.arg_host .. ngx.var.arg_item
           local value = ngx.var.arg_value
           -- print args 
           --ngx.say(ngx.var.arg_host,ngx.var.arg_item,ngx.var.arg_value)
           -- insert into mysql
           local sql = "insert into host_monit set host=\'"..host.."\',item=\'"..item.."\',value=\'"..value.."\';"
           ngx.say(sql)
           if host == nil then
              ngx.say("the host is null")
              return
           end
           if item == nil then
               ngx.say("the item is null")
               return
           end
           if value == nil then
               ngx.say("the value is null")
               return
           end

            local mysql = require "resty.mysql"
            local db, err = mysql:new()
            if not db then
                ngx.say("failed to instantiate mysql: ", err)
                return
            end

            db:set_timeout(1000) -- 1 sec

            local ok, err, errno, sqlstate = db:connect{
                host = "127.0.0.1",
                port = 3306,
                database = "ngx_test",
                user = "ngx_test",
                password = "ngx_test",
                max_packet_size = 1024 * 1024 }

            if not ok then
                ngx.say("failed to connect: ", err, ": ", errno, " ", sqlstate)
                return
            end
            
            res, err, errno, sqlstate =
                db:query(sql)
            if not res then
                ngx.say("bad result: ", err, ": ", errno, ": ", sqlstate, ".")
                return
            end
            -- local cjson = require "cjson"
            -- ngx.say("result: ", cjson.encode(res))

            -- put it into the connection pool of size 100,
            -- with 0 idle timeout
            local ok, err = db:set_keepalive(0, 200)
            if not ok then
                ngx.say("failed to set keepalive: ", err)
                return
            end

           ngx.print("the host: ", host, "the item", item, "the value", value )


          ';    
         }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443;
    #    server_name  localhost;

    #    ssl                  on;
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_timeout  5m;

    #    ssl_protocols  SSLv2 SSLv3 TLSv1;
    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers   on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
